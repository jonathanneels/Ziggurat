"use strict";
/**
 * Generated by the Babylon.JS Editor v4.0.4
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@babylonjs/core");
/**
 * Returns wether or not the given constructor is an ES6 (or more) class.
 * @param ctor defines the reference to the constructor to test.
 * @returns wether or not the given constructor is
 */
function isEs6Class(ctor) {
    try {
        ctor.call({});
        return false;
    }
    catch (e) {
        return true;
    }
}
/**
 * Requires the nedded scripts for the given nodes array and attach them.
 * @param scene defines the reference to the scene that contains the given nodes.
 * @param scriptsMap defines the map that contains the scripts constructors ordered by script path.
 * @param nodes the array of nodes to attach script (if exists).
 */
function requireScriptForNodes(scene, scriptsMap, nodes) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j;
    var dummyScene = new core_1.Scene(scene.getEngine(), { virtual: true });
    var initializedNodes = [];
    // Initialize nodes
    for (var _i = 0, _k = nodes; _i < _k.length; _i++) {
        var n = _k[_i];
        if (!n.metadata || !n.metadata.script || !n.metadata.script.name || n.metadata.script.name === "None") {
            continue;
        }
        var exports_1 = scriptsMap[n.metadata.script.name];
        if (!exports_1) {
            continue;
        }
        var scene_1 = n instanceof core_1.Scene ? n : n.getScene();
        // Get prototype.
        var prototype = exports_1.default.prototype;
        // Call constructor
        if (isEs6Class(prototype.constructor)) {
            var currentScene = core_1.EngineStore.LastCreatedScene;
            core_1.EngineStore._LastCreatedScene = dummyScene;
            var clone = Reflect.construct(prototype.constructor.bind(n), []);
            Reflect.setPrototypeOf(n, clone.constructor.prototype);
            core_1.EngineStore._LastCreatedScene = currentScene;
            for (var key in clone) {
                if (!Reflect.has(n, key)) {
                    n[key] = clone[key];
                }
            }
            clone.dispose();
        }
        else {
            if (exports_1.IsGraph) {
                exports_1.IsGraphAttached = true;
                prototype.constructor.call(n, scene_1, n);
            }
            else {
                prototype.constructor.call(n);
            }
            // Add prototype
            do {
                for (var key in prototype) {
                    if (!prototype.hasOwnProperty(key) || key === "constructor") {
                        continue;
                    }
                    n[key] = prototype[key].bind(n);
                }
                prototype = Object.getPrototypeOf(prototype);
            } while (((_a = prototype.constructor) === null || _a === void 0 ? void 0 : _a.IsComponent) === true);
        }
        // Call onInitialize
        (_b = n.onInitialize) === null || _b === void 0 ? void 0 : _b.call(n);
        initializedNodes.push({ node: n, exports: exports_1 });
    }
    var _loop_1 = function (i) {
        var n = i.node;
        var e = i.exports;
        var scene_2 = i.node instanceof core_1.Scene ? i.node : i.node.getScene();
        // Check start
        if (n.onStart) {
            var startObserver_1 = scene_2.onBeforeRenderObservable.addOnce(function () {
                startObserver_1 = null;
                n.onStart();
            });
            n.onDisposeObservable.addOnce(function () {
                if (startObserver_1) {
                    scene_2.onBeforeRenderObservable.remove(startObserver_1);
                }
            });
        }
        // Check update
        if (n.onUpdate) {
            var updateObserver_1 = scene_2.onBeforeRenderObservable.add(function () { return n.onUpdate(); });
            n.onDisposeObservable.addOnce(function () { return scene_2.onBeforeRenderObservable.remove(updateObserver_1); });
        }
        // Check properties
        var properties = (_c = n.metadata.script.properties) !== null && _c !== void 0 ? _c : {};
        for (var key in properties) {
            var p = properties[key];
            switch (p.type) {
                case "Vector2":
                    n[key] = new core_1.Vector2(p.value.x, p.value.y);
                    break;
                case "Vector3":
                    n[key] = new core_1.Vector3(p.value.x, p.value.y, p.value.z);
                    break;
                case "Vector4":
                    n[key] = new core_1.Vector4(p.value.x, p.value.y, p.value.z, p.value.w);
                    break;
                case "Color3":
                    n[key] = new core_1.Color3(p.value.r, p.value.g, p.value.b);
                    break;
                case "Color4":
                    n[key] = new core_1.Color4(p.value.r, p.value.g, p.value.b, p.value.a);
                    break;
                default:
                    n[key] = p.value;
                    break;
            }
        }
        // Check linked children.
        if (n instanceof core_1.Node) {
            var childrenLinks = (_d = e.default._ChildrenValues) !== null && _d !== void 0 ? _d : [];
            var _loop_2 = function (link) {
                var child = n.getChildren((function (node) { return node.name === link.nodeName; }), true)[0];
                n[link.propertyKey] = child;
            };
            for (var _i = 0, childrenLinks_1 = childrenLinks; _i < childrenLinks_1.length; _i++) {
                var link = childrenLinks_1[_i];
                _loop_2(link);
            }
        }
        // Check linked nodes from scene.
        var sceneLinks = (_e = e.default._SceneValues) !== null && _e !== void 0 ? _e : [];
        for (var _a = 0, sceneLinks_1 = sceneLinks; _a < sceneLinks_1.length; _a++) {
            var link = sceneLinks_1[_a];
            var node = scene_2.getNodeByName(link.nodeName);
            n[link.propertyKey] = node;
        }
        // Check particle systems
        var particleSystemLinks = (_f = e.default._ParticleSystemValues) !== null && _f !== void 0 ? _f : [];
        var _loop_3 = function (link) {
            var ps = scene_2.particleSystems.filter(function (ps) { return ps.emitter === n && ps.name === link.particleSystemName; })[0];
            n[link.propertyKey] = ps;
        };
        for (var _b = 0, particleSystemLinks_1 = particleSystemLinks; _b < particleSystemLinks_1.length; _b++) {
            var link = particleSystemLinks_1[_b];
            _loop_3(link);
        }
        // Check pointer events
        var pointerEvents = (_g = e.default._PointerValues) !== null && _g !== void 0 ? _g : [];
        var _loop_4 = function (event_1) {
            scene_2.onPointerObservable.add(function (e) {
                var _a;
                if (e.type !== event_1.type) {
                    return;
                }
                if (!event_1.onlyWhenMeshPicked) {
                    return n[event_1.propertyKey](e);
                }
                if (((_a = e.pickInfo) === null || _a === void 0 ? void 0 : _a.pickedMesh) === n) {
                    n[event_1.propertyKey](e);
                }
            });
        };
        for (var _c = 0, pointerEvents_1 = pointerEvents; _c < pointerEvents_1.length; _c++) {
            var event_1 = pointerEvents_1[_c];
            _loop_4(event_1);
        }
        // Check keyboard events
        var keyboardEvents = (_h = e.default._KeyboardValues) !== null && _h !== void 0 ? _h : [];
        var _loop_5 = function (event_2) {
            scene_2.onKeyboardObservable.add(function (e) {
                if (event_2.type && e.type !== event_2.type) {
                    return;
                }
                if (!event_2.keys.length) {
                    return n[event_2.propertyKey](e);
                }
                if (event_2.keys.indexOf(e.event.keyCode) !== -1 || event_2.keys.indexOf(e.event.key) !== -1) {
                    n[event_2.propertyKey](e);
                }
            });
        };
        for (var _d = 0, keyboardEvents_1 = keyboardEvents; _d < keyboardEvents_1.length; _d++) {
            var event_2 = keyboardEvents_1[_d];
            _loop_5(event_2);
        }
        // Retrieve impostors
        if (n instanceof core_1.AbstractMesh && !n.physicsImpostor) {
            n.physicsImpostor = (_j = n._scene.getPhysicsEngine()) === null || _j === void 0 ? void 0 : _j.getImpostorForPhysicsObject(n);
        }
        delete n.metadata.script;
    };
    // Configure initialized nodes
    for (var _l = 0, initializedNodes_1 = initializedNodes; _l < initializedNodes_1.length; _l++) {
        var i = initializedNodes_1[_l];
        _loop_1(i);
    }
    dummyScene.dispose();
}
/**
 * Works as an helper, this will:
 * = attach scripts on objects.
 * @param scene the scene to attach scripts, etc.
 */
function runScene(scene, rootUrl) {
    return __awaiter(this, void 0, void 0, function () {
        var scriptsMap;
        return __generator(this, function (_a) {
            scriptsMap = require("./scripts-map").scriptsMap;
            // Attach scripts to objects in scene.
            attachScripts(scriptsMap, scene);
            // Configure post-processes
            configurePostProcesses(scene, rootUrl);
            // Rendering groups
            setupRenderingGroups(scene);
            // Pose matrices
            applyMeshesPoseMatrices(scene);
            return [2 /*return*/];
        });
    });
}
exports.runScene = runScene;
/**
 * Attaches all available scripts on nodes of the given scene.
 * @param scene the scene reference that contains the nodes to attach scripts.
 */
function attachScripts(scriptsMap, scene) {
    requireScriptForNodes(scene, scriptsMap, scene.meshes);
    requireScriptForNodes(scene, scriptsMap, scene.lights);
    requireScriptForNodes(scene, scriptsMap, scene.cameras);
    requireScriptForNodes(scene, scriptsMap, scene.transformNodes);
    requireScriptForNodes(scene, scriptsMap, [scene]);
    var _loop_6 = function (scriptKey) {
        var script = scriptsMap[scriptKey];
        if (script.IsGraph && !script.IsGraphAttached) {
            var instance_1 = new script.default(scene);
            scene.executeWhenReady(function () { return instance_1["onStart"](); });
            scene.onBeforeRenderObservable.add(function () { return instance_1["onUpdate"](); });
        }
    };
    // Graphs
    for (var scriptKey in scriptsMap) {
        _loop_6(scriptKey);
    }
}
exports.attachScripts = attachScripts;
/**
 * Setups the rendering groups for meshes in the given scene.
 * @param scene defines the scene containing the meshes to configure their rendering group Ids.
 */
function setupRenderingGroups(scene) {
    scene.meshes.forEach(function (m) {
        var _a;
        if (!m.metadata || !(m instanceof core_1.Mesh)) {
            return;
        }
        m.renderingGroupId = (_a = m.metadata.renderingGroupId) !== null && _a !== void 0 ? _a : m.renderingGroupId;
    });
}
exports.setupRenderingGroups = setupRenderingGroups;
/**
 * Meshes using pose matrices with skeletons can't be parsed directly as the pose matrix is
 * missing from the serialzied data of meshes. These matrices are stored in the meshes metadata
 * instead and can be applied by calling this function.
 * @param scene defines the scene containing the meshes to configure their pose matrix.
 */
function applyMeshesPoseMatrices(scene) {
    scene.meshes.forEach(function (m) {
        var _a;
        if (m.skeleton && ((_a = m.metadata) === null || _a === void 0 ? void 0 : _a.basePoseMatrix)) {
            m.updatePoseMatrix(core_1.Matrix.FromArray(m.metadata.basePoseMatrix));
            delete m.metadata.basePoseMatrix;
        }
    });
}
exports.applyMeshesPoseMatrices = applyMeshesPoseMatrices;
/**
 * Attaches the a script at runtime to the given node according to the given script's path.
 * @param scriptPath defines the path to the script to attach (available as a key in the exported "scriptsMap" map).
 * @param object defines the reference to the object (node or scene) to attach the script to.
 */
function attachScriptToNodeAtRuntime(scriptPath, object) {
    var _a, _b;
    var scriptsMap = require("./scripts-map").scriptsMap;
    object.metadata = (_a = object.metadata) !== null && _a !== void 0 ? _a : {};
    object.metadata.script = (_b = object.metadata.script) !== null && _b !== void 0 ? _b : {};
    object.metadata.script.name = scriptPath;
    requireScriptForNodes(object instanceof core_1.Scene ? object : object.getScene(), scriptsMap, [object]);
}
exports.attachScriptToNodeAtRuntime = attachScriptToNodeAtRuntime;
/**
 * Defines the reference to the SSAO2 rendering pipeline.
 */
exports.ssao2RenderingPipelineRef = null;
/**
 * Defines the reference to the SSR post-process.
 */
exports.screenSpaceReflectionPostProcessRef = null;
/**
 * Defines the reference to the default rendering pipeline.
 */
exports.defaultRenderingPipelineRef = null;
/**
 * Defines the reference to the motion blur post-process.
 */
exports.motionBlurPostProcessRef = null;
/**
 * Configures and attaches the post-processes of the given scene.
 * @param scene the scene where to create the post-processes and attach to its cameras.
 * @param rootUrl the root Url where to find extra assets used by pipelines. Should be the same as the scene.
 */
function configurePostProcesses(scene, rootUrl) {
    if (rootUrl === void 0) { rootUrl = null; }
    var _a, _b, _c;
    if (rootUrl === null || !((_a = scene.metadata) === null || _a === void 0 ? void 0 : _a.postProcesses)) {
        return;
    }
    // Load  post-processes configuration
    var data = scene.metadata.postProcesses;
    if (data.ssao && !exports.ssao2RenderingPipelineRef) {
        exports.ssao2RenderingPipelineRef = core_1.SSAO2RenderingPipeline.Parse(data.ssao.json, scene, rootUrl);
        if (data.ssao.enabled) {
            scene.postProcessRenderPipelineManager.attachCamerasToRenderPipeline(exports.ssao2RenderingPipelineRef.name, scene.cameras);
        }
    }
    if (((_b = data.screenSpaceReflections) === null || _b === void 0 ? void 0 : _b.json) && !exports.screenSpaceReflectionPostProcessRef) {
        exports.screenSpaceReflectionPostProcessRef = core_1.ScreenSpaceReflectionPostProcess._Parse(data.screenSpaceReflections.json, scene.activeCamera, scene, "");
    }
    if (data.default && !exports.defaultRenderingPipelineRef) {
        exports.defaultRenderingPipelineRef = core_1.DefaultRenderingPipeline.Parse(data.default.json, scene, rootUrl);
        if (!data.default.enabled) {
            scene.postProcessRenderPipelineManager.detachCamerasFromRenderPipeline(exports.defaultRenderingPipelineRef.name, scene.cameras);
        }
    }
    if ((_c = data.motionBlur) === null || _c === void 0 ? void 0 : _c.json) {
        exports.motionBlurPostProcessRef = core_1.MotionBlurPostProcess._Parse(data.motionBlur.json, scene.activeCamera, scene, "");
    }
    scene.onDisposeObservable.addOnce(function () {
        exports.ssao2RenderingPipelineRef = null;
        exports.screenSpaceReflectionPostProcessRef = null;
        exports.defaultRenderingPipelineRef = null;
        exports.motionBlurPostProcessRef = null;
    });
}
exports.configurePostProcesses = configurePostProcesses;
/**
 * Overrides the texture parser.
 */
(function overrideTextureParser() {
    var textureParser = core_1.SerializationHelper._TextureParser;
    core_1.SerializationHelper._TextureParser = function (sourceProperty, scene, rootUrl) {
        var _a;
        if (sourceProperty.isCube && !sourceProperty.isRenderTarget && sourceProperty.files && ((_a = sourceProperty.metadata) === null || _a === void 0 ? void 0 : _a.isPureCube)) {
            sourceProperty.files.forEach(function (f, index) {
                sourceProperty.files[index] = rootUrl + f;
            });
        }
        var texture = textureParser.call(core_1.SerializationHelper, sourceProperty, scene, rootUrl);
        if (sourceProperty.url) {
            texture.url = rootUrl + sourceProperty.url;
        }
        return texture;
    };
})();
/**
 * @deprecated will be moved to "./decorators.ts".
 */
__export(require("./decorators"));
//# sourceMappingURL=tools.js.map